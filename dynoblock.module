<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_entity_presave().
 *
 * Populates dynoblock region if it currently has no value.
 */
function dynoblock_entity_presave(EntityInterface $entity) {
  if ($entity->getEntityTypeId() !== 'node') {
    return;
  }
  // Find any dynoblock fields attached to an entity.
  $fieldnames = array();
  $fields = $entity->getFieldDefinitions();
  foreach ($fields as $fieldname => $field) {
    if (substr($fieldname, 0, 6) !== 'field_') {
      continue;
    }
    $fieldtype = $field->getType();
    if ($fieldtype !== 'dynoblock') {
      continue;
    }
    $fieldnames[] = $fieldname;
  }
  if (!empty($fieldnames)) {
    // Handle each dynoblock field.
    foreach ($fieldnames as $fieldname) {
      $dynoblock_field = $entity->get($fieldname);
      if ($dynoblock_field->isEmpty()) {
        // @todo randId() method is part of DynoblockForms but should be in
        // utility class instead?
        $rand = md5(random_bytes(32) . time());
        $dynoblock_field->set(0, $rand);
      }
    }
  }
}

/**
 * Implements hook_page_attachments().
 *
 * Adds Dynoblock javascript and css to the page.
 */
function dynoblock_page_attachments(array &$page) {
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute();
  if (!$is_admin) {
    if (\Drupal::currentUser()->hasPermission('use dynoblocks')) {
      $page['#attached']['library'][] = 'dynoblock/edit';
      $page['#attached']['library'][] = 'dynoblock/font-awesome';
      $configs['load_ui'] = TRUE;
      $configs['dir_uri'] = '/' . drupal_get_path('module', 'dynoblock');
    }
    else {
      $configs = array('load_ui' => FALSE);
    }
    $page['#attached']['library'][] = 'dynoblock/core';

    // Add configurable JS.
    $configs['ui_scroll'] = isset($configs['ui_scroll']) && $configs['ui_scroll'] === FALSE ? FALSE : TRUE;

    // Add current path for defining cache tags on save.
    $current_path = \Drupal::service('path.current')->getPath();
    $exploded_path = explode('/', $current_path);
    if (!empty($exploded_path[1]) && !empty($exploded_path[2])) {
      $configs['cache']['entity'] = $exploded_path[1];
      $configs['cache']['id'] = $exploded_path[2];
    }

    $page['#attached']['drupalSettings']['dynoblock']['core'] = $configs;
  }
}


/**
 * Implements hook_theme().
 */
function dynoblock_theme($existing, $type, $theme, $path) {
  $themes = array(
    'dynoblock_tabledrag' => array(
      'render element' => 'element',
      'function' => 'theme_dynoblock_tabledrag',
    ),
    'dynoblock_image_thumbnail' => array(
      'render element' => 'element',
      'function' => 'theme_dynoblock_image_thumbnail',
    ),
  );
  $dynoblock = \Drupal::service('dynoblock.core');
  $plugins = $dynoblock->loadWidgets();
  foreach($plugins as $key => $plugin){
    $plugin = $dynoblock->pluginManager->createInstance($key);
    if(!empty($plugin->themes)){
      foreach($plugin->themes as $tid => $properties){
        if (!empty($properties['template_dir'])) {
          $themes[$tid] = array(
            'render element' => 'block',
            'variables' => array('block' => NULL),
            'path' => drupal_get_path('module', $plugin->module) . '/' . $properties['template_dir'],
            'template' => $tid,
          );
        }
      }
    }
  }
  return $themes;
}

/**
 * Formats uploaded image thumbnail display.
 *
 * @param $variables
 * @return string
 */
function theme_dynoblock_image_thumbnail($variables) {
  $element = $variables['element'];
  $output = '';
  $output .= '<div class="image-widget form-managed-file input-group clearfix">';
  if ($element['fid']['#value'] != 0) {
    // Replace default image style with thumbnail format.
    $element['filename']['#markup'] = '<div class="form-control"><span class="file">';
    $element['filename']['#markup'] .= theme('image_style', array('style_name' => 'thumbnail', 'path' => $element['#file']->uri, 'getsize' => FALSE));
    $file_url = file_create_url($element['#file']->uri);
    $element['filename']['#markup'] .= l($element['#file']->filename, $file_url) . '</span></div>';
    if (isset($element['remove_button'])) {
      $element['remove_button']['#prefix'] = '<span class="input-group-btn">';
      $element['remove_button']['#sufffix'] = '</span';
    }
  }

  // The remove button is already taken care of by rendering the rest of the form.
  $output .= drupal_render_children($element);
  $output .= '</div>';

  return $output;
}


function theme_dynoblock_tabledrag($vars) {
  $element = $vars['element'];
  $content['table'] = array(
    '#type' => 'table',
    '#header' => array(t('Items'), t('Weight')),
    '#empty' => t('There are no items yet. Add an item.'),
    // TableDrag: Each array value is a list of callback arguments for
    // drupal_add_tabledrag(). The #id of the table is automatically prepended;
    // if there is none, an HTML ID is auto-generated.
    '#tabledrag' => array(
      array(
        'action' => 'order',
        'relationship' => 'sibling',
        'group' => 'widget-table-sort',
      ),
    ),
    '#attributes' => array(
      'id' => 'widget-table-sort',
    ),
  );
  $i = 0;
  foreach (\Drupal\Core\Render\Element::children($element) as $key) {
    if ($key !== 'add_another') {
      // TableDrag: Mark the table row as draggable.
      $content['table']['#rows'][$key]['class'][] = 'draggable';
      // TableDrag: Sort the table row according to its existing/configured weight.
      $content['table']['#rows'][$key]['#weight'] = $i;
      // Some table columns containing raw markup.
      $content['table']['#rows'][$key]['data'][] = render($element[$key]);
      // TableDrag: Weight column element.
      $weight = array(
        '#type' => 'textfield',
        '#title' => t('Weight for @title', array('@title' => 'Weight')),
        '#title_display' => 'invisible',
        '#value' => $i,
          // Classify the weight element for #tabledrag.
        '#attributes' => array('class' => array('table-order-weight', 'widget-table-sort')),
      );
      $content['table']['#rows'][$key]['data'][] = render($weight);
      $i++;
    }
  }

  $output = '<div id="' . $element['#attributes']['id'] . '" class="widget-field-groups">';
  $output .= render($content);
  $output .= render($element['add_another']);
  $output .= '</div>';

  drupal_attach_tabledrag($content['table'], array(
    'table_id' => 'widget-table-sort',
    'action' => 'order',
    'relationship' => 'sibling',
    'group' => 'widget-table-sort',
  ));
  return $output;
}

function dynoblock_ajax_load($type, $id) {
  $result = array('html' => NULL, 'type' => $type, 'id' => $id, 'commands' => NULL);
  if ($id && $type && !empty($_POST['data'])) {
    switch ($type) {
      case 'blocks':
        // Get the Dynblock and its renderable html.
        $blocks = DynoBlocks::renderDynoBlocks($id);
        $result['html'] = render($blocks);
        // Get the ajax commands. These can consist of js
        // files needing loaded or js settings being added..
        $commands = ajax_render(array());
        _dynoblocks_get_commands($_POST['data'], $commands);
        $result['commands'] = $commands;
        break;
    }
  }
  print drupal_json_encode($result);
}

/**
 * implments hook_dynoblock_themes
 */
function dynoblock_dynoblock_themes() {
  return array(
    'dynoblock' => array(
      'id' => 'dynoblock',
      'label' => 'DynoBlock',
      'description_short' => 'Contains miscellaneous blocks.',
      'module' => 'dynoblock',
      'path' => 'src/Plugin/Dynoblock',
    ),
  );
}

/**
 * Default Dynoblocks core ajax callback handler
 */
function dynoblock_widget_settings_callback($form, FormStateInterface &$form_state) {
  array_pop($form_state['triggering_element']['#array_parents']);
  array_pop($form_state['triggering_element']['#array_parents']);
  $element = drupal_array_get_nested_value($form, $form_state['triggering_element']['#array_parents']);
  return $element;
}

function dynoblock_form_ajax_submit($form, FormStateInterface &$form_state) {
  $core = \Drupal::service('dynoblock.core');
  $form_state['rebuild'] = TRUE;
  $widget = $form_state['input']['widget'];
  $widget = $core->initPlugin($widget);
  if ($widget) {
    $widget->ajaxSubmit($form, $form_state);
  }
}


function dynoblock_field_widget_ajax_callback($form, FormStateInterface &$form_state) {
  if (!empty($form_state['triggering_element']['#ajax']['handler'])) {
    $handler = new $form_state['triggering_element']['#ajax']['handler']($form_state);
    return $handler->onAjax($form, $form_state);
    //$handler->onAjax($form, $form_state);
  }
}

function _dynoblock_add_token_support() {
  $token['container'] = array(
    '#type' => 'container',
    '#weight' => 100,
    '#attributes' => array(
      'class' => array('dyno-token-tree'),
    ),
  );
  $token['container']['tokens'] = array(
    '#type' => 'details',
    '#title' => t('Tokens'),
  );
  $token['container']['tokens']['tree'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('webmem_primary', 'webmem_household', 'webmem_membership', 'webmem_options'),
    '#global_types' => FALSE,
    '#click_insert' => FALSE,
  );
  return $token;
}


function dynoblock_condition_callback() {
  $condition = _dynoblock_condition_form();
  print drupal_json_encode(render($condition));
}

function _dynoblock_condition_form($values = array()) {
  $condition['conditions'] = array(
    '#type' => 'details',
    '#weight' => 98,
    '#attributes' => array(
      'class' => array('dyno-condition'),
    ),
  );
  $condition['conditions']['label'] = array(
    '#type' => 'markup',
    '#markup' => '<label>Conditions</label>',
  );
  $condition['conditions']['description'] = array(
    '#type' => 'markup',
    '#markup' => '<p>Enter a conditional that needs to return true for a this block to be displayed. If no conditionals are added, this block will display by default.</p>',
  );
  $condition['conditions']['condition_token'] = array(
    '#type' => 'textfield',
    '#title' => t('Token'),
    '#description' => t('Token for conditional.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#name' => 'condition_token',
    '#value' => isset($values['condition_token']) ? $values['condition_token'] : '',
  );

  $condition['conditions']['operators'] = array(
    '#type' => 'select',
    '#title' => t('Operator'),
    '#description' => t('The description appears usually below the item.'),
    '#options' => array(
      '==' => '==',
      '===' => '===',
      '!=' => '!=',
      '!==' => '!==',
      '<' => '<',
      '>' => '>',
      '<=' => '<=',
      '>=' => '>=',
    ),
    '#default_value' => -1,
    '#name' => 'condition_operator',
    '#value' => !empty($values['condition_operator']) ? $values['condition_operator'] : '',
  );
  $condition['conditions']['value'] = array(
    '#type' => 'textfield',
    '#title' => t('Token value'),
    '#size' => 20,
    '#maxlength' => 255,
    '#name' => 'condition_value',
    '#value' => isset($values['condition_value']) ? $values['condition_value'] : '',
  );
  return $condition;
}


function _dynoblock_weight_form($values = array()) {
  $form['weight'] = array(
    '#type' => 'container',
    '#weight' => 97,
    '#attributes' => array(
      'class' => array('dyno-weight'),
    ),
  );
  $form['weight']['weight'] = array(
    '#type' => 'textfield',
    '#title' => t('Weight'),
    '#description' => t('The title you enter here appears on the page.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#value' => isset($values['weight']) ? $values['weight'] : 0,
  );
  return $form;
}
